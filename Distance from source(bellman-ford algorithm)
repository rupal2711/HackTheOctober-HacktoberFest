#include<bits/stdc++.h>
using namespace std;

class Solution{
	public:
    void dfs(int src,int s,vector<int>& visited,vector<vector<int>>a[],vector<int>& dist)
    {
        
        for(int i=0;i<a[s].size();i++)
        {
           if(a[s][i][0]!=src)
            {
                if(dist[a[s][i][0]]>dist[s]+a[s][i][1])
                {
                    dist[a[s][i][0]]=dist[s]+a[s][i][1];
                dfs(src,a[s][i][0],visited,a,dist);
                }
                
            }
            
        }     
    }
    
    vector <int> bellman_ford(int V, vector<vector<int>> adj, int S) {
       
        vector<vector<int>>a[V];
        
        for(int i=0;i<adj.size();i++)
        {
            vector<int>t1;
            t1.push_back(adj[i][1]);
            t1.push_back(adj[i][2]);
            
            a[adj[i][0]].push_back(t1);
        }
        
        vector<int>visited(V,0);
        vector<int>dist(V,100000000);
        dist[S]=0;
        
        dfs(S,S,visited,a,dist);
        return dist;
    }
};

int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj;
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1;
            t1.push_back(u);
            t1.push_back(v);
            t1.push_back(w);
            adj.push_back(t1);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.bellman_ford(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}

 
